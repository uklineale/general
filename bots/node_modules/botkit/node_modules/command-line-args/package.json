{
  "name": "command-line-args",
  "version": "2.1.6",
  "description": "A library to collect command-line args and generate a usage guide.",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/command-line-args.git"
  },
  "main": "index",
  "bin": {
    "command-line-args": "bin/cli.js"
  },
  "scripts": {
    "test": "tape test/*.js",
    "docs": "jsdoc2md -l off -t jsdoc2md/README.hbs lib/*.js > README.md; echo",
    "cover": "istanbul cover ./node_modules/.bin/tape test/*.js && cat coverage/lcov.info | ./node_modules/.bin/coveralls && rm -rf coverage; echo",
    "es5": "babel --presets babel-preset-es2015 --no-comments lib --out-dir es5"
  },
  "keywords": [
    "argv",
    "parse",
    "argument",
    "args",
    "option",
    "options",
    "parser",
    "parsing",
    "cli",
    "command",
    "line"
  ],
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "babel-preset-es2015": "^6.5.0",
    "coveralls": "^2.11.4",
    "jsdoc-to-markdown": "^1.1.1",
    "tape": "^4",
    "test-value": "^1.0.0"
  },
  "dependencies": {
    "array-back": "^1.0.2",
    "command-line-usage": "^2",
    "core-js": "^2.0.1",
    "feature-detect-es6": "^1.2.0",
    "find-replace": "^1",
    "typical": "^2.3.0"
  },
  "standard": {
    "ignore": [
      "es5"
    ]
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)\n[![npm module downloads](http://img.shields.io/npm/dt/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)\n[![Build Status](https://travis-ci.org/75lb/command-line-args.svg?branch=master)](https://travis-ci.org/75lb/command-line-args)\n[![Coverage Status](https://coveralls.io/repos/75lb/command-line-args/badge.svg?branch=master&service=github)](https://coveralls.io/github/75lb/command-line-args?branch=master)\n[![Dependency Status](https://david-dm.org/75lb/command-line-args.svg)](https://david-dm.org/75lb/command-line-args)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n[![Join the chat at https://gitter.im/75lb/command-line-args](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/75lb/command-line-args?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# command-line-args\nA library to collect command-line args and generate a usage guide.\n\n*If your app requires a git-like command interface, consider using [command-line-commands](https://github.com/75lb/command-line-commands).*\n\n## Synopsis\nYou can set options using the main notation standards (getopt, getopt_long, etc.). These commands are all equivalent, setting the same values:\n```\n$ example --verbose --timeout=1000 --src one.js --src two.js\n$ example --verbose --timeout 1000 --src one.js two.js\n$ example -vt 1000 --src one.js two.js\n$ example -vt 1000 one.js two.js\n```\n\nTo access the values, first describe the options your app accepts (see [option definitions](#option-definitions)).\n```js\nvar commandLineArgs = require('command-line-args');\n\nvar cli = commandLineArgs([\n  { name: 'verbose', alias: 'v', type: Boolean },\n  { name: 'src', type: String, multiple: true, defaultOption: true },\n  { name: 'timeout', alias: 't', type: Number }\n])\n```\nThe [`type`](#module_definition--OptionDefinition+type) property is a setter function (the value you receive is the output of this), giving you full control over the value received.\n\nNext, collect the command line args using [.parse()](#module_command-line-args--CommandLineArgs+parse):\n```js\nvar options = cli.parse()\n```\n\n`options` now looks like this:\n```js\n{\n  files: [\n    'one.js',\n    'two.js'\n  ],\n  verbose: true,\n  timeout: 1000\n}\n```\n\nWhen dealing with large amounts of options it often makes sense to [group](#module_definition--Definition+group) them.\n\nThe [.getUsage()](#module_command-line-args--CommandLineArgs+getUsage) method generates a usage guide. For example:\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/footer.png)\n\n### Notation rules\n\nNotation rules for setting command-line options.\n\n* Argument order is insignificant. Whether you set `--example` at the beginning or end of the arg list makes no difference.\n* Options with a [type](#module_definition--OptionDefinition+type) of `Boolean` do not need to supply a value. Setting `--flag` or `-f` will set that option's value to `true`. This is the only [type](#module_definition--OptionDefinition+type) with special behaviour.\n* Three ways to set an option value\n  * `--option value`\n  * `--option=value`\n  * `-o value`\n* Two ways to a set list of values (on options with [multiple](#module_definition--OptionDefinition+multiple) set)\n  * `--list one two three`\n  * `--list one --list two --list three`\n* Short options ([alias](#optionalias--string)) can be set in groups. The following are equivalent:\n  * `-a -b -c`\n  * `-abc`\n\n## Install\n\n### as a library\n```sh\n$ npm install command-line-args --save\n```\n\n### as a tool\n```sh\n$ npm install -g command-line-args\n```\n\nIf you install globally you get the `command-line-args` test-harness. You test by piping in a module which exports an option definitions array. You can then view the `.parse()` output for the args you pass.\n\nFor example:\n\n```sh\n$ cat example/typical.js | command-line-args lib/* --timeout=1000\n{ src:\n   [ 'lib/command-line-args.js',\n     'lib/definition.js',\n     'lib/definitions.js',\n     'lib/option.js' ],\n  timeout: 1000 }\n```\n\n# API Reference\n<a name=\"module_command-line-args\"></a>\n## command-line-args\nA library to collect command-line args and generate a usage guide.\n\n\n* [command-line-args](#module_command-line-args)\n    * [CommandLineArgs](#exp_module_command-line-args--CommandLineArgs) ⏏\n        * [new CommandLineArgs(definitions)](#new_module_command-line-args--CommandLineArgs_new)\n        * [.parse([argv])](#module_command-line-args--CommandLineArgs+parse) ⇒ <code>object</code>\n        * [.getUsage([options])](#module_command-line-args--CommandLineArgs+getUsage) ⇒ <code>string</code>\n\n<a name=\"exp_module_command-line-args--CommandLineArgs\"></a>\n### CommandLineArgs ⏏\nA class encapsulating operations you can perform using an [OptionDefinition](#exp_module_definition--OptionDefinition) array as input.\n\n**Kind**: Exported class  \n<a name=\"new_module_command-line-args--CommandLineArgs_new\"></a>\n#### new CommandLineArgs(definitions)\nThe constructor will throw if you pass invalid option definitions. You should fix these issues before proceeding.\n\n**Throws**:\n\n- `NAME_MISSING` if an option definition is missing the required `name` property\n- `INVALID_TYPE` if an option definition has a `type` value that's not a function\n- `INVALID_ALIAS` if an alias is numeric, a hyphen or a length other than 1\n- `DUPLICATE_NAME` if an option definition name was used more than once\n- `DUPLICATE_ALIAS` if an option definition alias was used more than once\n- `DUPLICATE_DEFAULT_OPTION` if more than one option definition has `defaultOption: true`\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| definitions | <code>[Array.&lt;definition&gt;](#module_definition)</code> | An optional array of [OptionDefinition](#exp_module_definition--OptionDefinition) objects |\n\n**Example**  \n```js\nconst commandLineArgs = require('command-line-args')\nconst cli = commandLineArgs([\n  { name: 'file' },\n  { name: 'verbose' },\n  { name: 'depth'}\n])\n```\n<a name=\"module_command-line-args--CommandLineArgs+parse\"></a>\n#### cli.parse([argv]) ⇒ <code>object</code>\nReturns an object containing all the values and flags set on the command line. By default it parses the global [`process.argv`](https://nodejs.org/api/process.html#process_process_argv) array.\n\n**Kind**: instance method of <code>[CommandLineArgs](#exp_module_command-line-args--CommandLineArgs)</code>  \n**Throws**:\n\n- `UNKNOWN_OPTION` if the user sets an option without a definition\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| [argv] | <code>Array.&lt;string&gt;</code> | An array of strings, which if passed will be parsed instead of `process.argv`. |\n\n<a name=\"module_command-line-args--CommandLineArgs+getUsage\"></a>\n#### cli.getUsage([options]) ⇒ <code>string</code>\nGenerates a usage guide. Please see [command-line-usage](https://github.com/75lb/command-line-usage) for full instructions of how to use.\n\n**Kind**: instance method of <code>[CommandLineArgs](#exp_module_command-line-args--CommandLineArgs)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| [options] | <code>object</code> | the options to pass to [command-line-usage](https://github.com/75lb/command-line-usage) |\n\n\n<a name=\"exp_module_definition--OptionDefinition\"></a>\n## OptionDefinition ⏏\nDescribes a command-line option. The additional properties `description` and `typeLabel` used by [.getUsage()](#module_command-line-args--CommandLineArgs+getUsage) are described [here](https://github.com/75lb/command-line-usage#getusagedefinitions-options--string-).\n\n**Kind**: Exported class  \n* [OptionDefinition](#exp_module_definition--OptionDefinition) ⏏\n    * [.name](#module_definition--OptionDefinition.OptionDefinition+name) : <code>string</code>\n    * [.type](#module_definition--OptionDefinition.OptionDefinition+type) : <code>function</code>\n    * [.alias](#module_definition--OptionDefinition.OptionDefinition+alias) : <code>string</code>\n    * [.multiple](#module_definition--OptionDefinition.OptionDefinition+multiple) : <code>boolean</code>\n    * [.defaultOption](#module_definition--OptionDefinition.OptionDefinition+defaultOption) : <code>boolean</code>\n    * [.defaultValue](#module_definition--OptionDefinition.OptionDefinition+defaultValue) : <code>\\*</code>\n    * [.group](#module_definition--OptionDefinition.OptionDefinition+group) : <code>string</code> &#124; <code>Array.&lt;string&gt;</code>\n\n<a name=\"module_definition--OptionDefinition.OptionDefinition+name\"></a>\n### option.name : <code>string</code>\nThe only required definition property is `name`, so the simplest working example is\n```js\n[\n  { name: \"file\" },\n  { name: \"verbose\" },\n  { name: \"depth\"}\n]\n```\n\nIn this case, the value of each option will be either a Boolean or string.\n\n| #   | Command line args | .parse() output |\n| --- | -------------------- | ------------ |\n| 1   | `--file` | `{ file: true }` |\n| 2   | `--file lib.js --verbose` | `{ file: \"lib.js\", verbose: true }` |\n| 3   | `--verbose very` | `{ verbose: \"very\" }` |\n| 4   | `--depth 2` | `{ depth: \"2\" }` |\n\nUnicode option names and aliases are valid, for example:\n```js\n[\n  { name: 'один' },\n  { name: '两' },\n  { name: 'три', alias: 'т' }\n]\n```\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+type\"></a>\n### option.type : <code>function</code>\nThe `type` value is a setter function (you receive the output from this), enabling you to be specific about the type and value received.\n\nYou can use a class, if you like:\n\n```js\nconst fs = require('fs')\n\nfunction FileDetails(filename){\n  if (!(this instanceof FileDetails)) return new FileDetails(filename)\n  this.filename = filename\n  this.exists = fs.existsSync(filename)\n}\n\nconst cli = commandLineArgs([\n  { name: 'file', type: FileDetails },\n  { name: 'depth', type: Number }\n])\n```\n\n| #   | Command line args| .parse() output |\n| --- | ----------------- | ------------ |\n| 1   | `--file asdf.txt` | `{ file: { filename: 'asdf.txt', exists: false } }` |\n\nThe `--depth` option expects a `Number`. If no value was set, you will receive `null`.\n\n| #   | Command line args | .parse() output |\n| --- | ----------------- | ------------ |\n| 2   | `--depth` | `{ depth: null }` |\n| 3   | `--depth 2` | `{ depth: 2 }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+alias\"></a>\n### option.alias : <code>string</code>\ngetopt-style short option names. Can be any single character (unicode included) except a digit or hypen.\n\n```js\n[\n  { name: \"hot\", alias: \"h\", type: Boolean },\n  { name: \"discount\", alias: \"d\", type: Boolean },\n  { name: \"courses\", alias: \"c\" , type: Number }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   | `-hcd` | `{ hot: true, courses: null, discount: true }` |\n| 2   | `-hdc 3` | `{ hot: true, discount: true, courses: 3 }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+multiple\"></a>\n### option.multiple : <code>boolean</code>\nSet this flag if the option takes a list of values. You will receive an array of values, each passed through the `type` function (if specified).\n\n```js\n[\n  { name: \"files\", type: String, multiple: true }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 2   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 3   | `--files *` | `{ files: [ 'one.js', 'two.js' ] }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+defaultOption\"></a>\n### option.defaultOption : <code>boolean</code>\nAny unclaimed command-line args will be set on this option. This flag is typically set on the most commonly-used option to make for more concise usage (i.e. `$ myapp *.js` instead of `$ myapp --files *.js`).\n\n```js\n[\n  { name: \"files\", type: String, multiple: true, defaultOption: true }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 2   | `one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n| 3   | `*` | `{ files: [ 'one.js', 'two.js' ] }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+defaultValue\"></a>\n### option.defaultValue : <code>\\*</code>\nAn initial value for the option.\n\n```js\n[\n  { name: \"files\", type: String, multiple: true, defaultValue: [ \"one.js\" ] },\n  { name: \"max\", type: Number, defaultValue: 3 }\n]\n```\n\n| #   | Command line | .parse() output |\n| --- | ------------ | ------------ |\n| 1   |  | `{ files: [ 'one.js' ], max: 3 }` |\n| 2   | `--files two.js` | `{ files: [ 'two.js' ], max: 3 }` |\n| 3   | `--max 4` | `{ files: [ 'one.js' ], max: 4 }` |\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n<a name=\"module_definition--OptionDefinition.OptionDefinition+group\"></a>\n### option.group : <code>string</code> &#124; <code>Array.&lt;string&gt;</code>\nWhen your app has a large amount of options it makes sense to organise them in groups.\n\nThere are two automatic groups: `_all` (contains all options) and `_none` (contains options without a `group` specified in their definition).\n\n```js\n[\n  { name: \"verbose\", group: \"standard\" },\n  { name: \"help\", group: [ \"standard\", \"main\" ] },\n  { name: \"compress\", group: [ \"server\", \"main\" ] },\n  { name: \"static\", group: \"server\" },\n  { name: \"debug\" }\n]\n```\n\n<table>\n <tr>\n   <th>#</th><th>Command Line</th><th>.parse() output</th>\n </tr>\n <tr>\n   <td>1</td><td><code>--verbose</code></td><td><pre><code>\n{\n _all: { verbose: true },\n standard: { verbose: true }\n}\n</code></pre></td>\n </tr>\n <tr>\n   <td>2</td><td><code>--debug</code></td><td><pre><code>\n{\n _all: { debug: true },\n _none: { debug: true }\n}\n</code></pre></td>\n </tr>\n <tr>\n   <td>3</td><td><code>--verbose --debug --compress</code></td><td><pre><code>\n{\n _all: {\n   verbose: true,\n   debug: true,\n   compress: true\n },\n standard: { verbose: true },\n server: { compress: true },\n main: { compress: true },\n _none: { debug: true }\n}\n</code></pre></td>\n </tr>\n <tr>\n   <td>4</td><td><code>--compress</code></td><td><pre><code>\n{\n _all: { compress: true },\n server: { compress: true },\n main: { compress: true }\n}\n</code></pre></td>\n </tr>\n</table>\n\n**Kind**: instance property of <code>[OptionDefinition](#exp_module_definition--OptionDefinition)</code>  \n\n\n* * *\n\n&copy; 2015 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/command-line-args/issues"
  },
  "_id": "command-line-args@2.1.6",
  "dist": {
    "shasum": "423362becd4d9fcfd3d3144550286617210a35da"
  },
  "_from": "command-line-args@^2.1.6",
  "_resolved": "https://registry.npmjs.org/command-line-args/-/command-line-args-2.1.6.tgz"
}
