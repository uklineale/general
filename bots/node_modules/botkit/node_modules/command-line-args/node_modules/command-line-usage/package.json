{
  "name": "command-line-usage",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "version": "2.0.5",
  "description": "Generates command-line usage information",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/command-line-usage.git"
  },
  "license": "MIT",
  "main": "index",
  "keywords": [
    "terminal",
    "command line",
    "usage",
    "generator"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "docs": "jsdoc2md -t jsdoc2md/README.hbs --no-gfm lib/*.js > README.md; echo",
    "test": "tape test/*.js",
    "es5": "babel --presets babel-preset-es2015 --no-comments lib --out-dir es5"
  },
  "dependencies": {
    "ansi-escape-sequences": "^2.2.2",
    "array-back": "^1.0.3",
    "column-layout": "^2.1.1",
    "feature-detect-es6": "^1.2.0",
    "typical": "^2.4.2",
    "wordwrapjs": "^1.2.0"
  },
  "devDependencies": {
    "babel-preset-es2015": "^6.6.0",
    "jsdoc-to-markdown": "^1.3.6",
    "tape": "^4.5.1"
  },
  "standard": {
    "ignore": [
      "es5"
    ]
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/command-line-usage.svg)](https://www.npmjs.org/package/command-line-usage)\n[![npm module downloads](http://img.shields.io/npm/dt/command-line-usage.svg)](https://www.npmjs.org/package/command-line-usage)\n[![Build Status](https://travis-ci.org/75lb/command-line-usage.svg?branch=master)](https://travis-ci.org/75lb/command-line-usage)\n[![Dependency Status](https://david-dm.org/75lb/command-line-usage.svg)](https://david-dm.org/75lb/command-line-usage)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n# command-line-usage\nA simple template to create a usage guide. It was extracted from  [command-line-args](https://github.com/75lb/command-line-args) to facilitate arbitrary use.\n\n```js\nvar getUsage = require('command-line-usage');\nvar usage = getUsage(definitions, options)\n```\n\nInline ansi formatting can be used anywhere within the usage template using the formatting syntax described [here](https://github.com/75lb/ansi-escape-sequences#module_ansi-escape-sequences.format).\n\n## Examples\n\n### Simple\nA `description` field is added to each option definition. A `title`, `description` and simple `footer` are set in the getUsage options. [Code](https://github.com/75lb/command-line-usage/blob/master/example/simple.js).\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/simple.png)\n\n### Groups\nDemonstrates breaking the options up into groups. This example also sets a `typeLabel` on each option definition (e.g. a `typeLabel` value of `files` is more meaningful than the default `string[]`). [Code](https://github.com/75lb/command-line-usage/blob/master/example/groups.js).\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/groups.png)\n\n### Header\nHere, the `title` is replaced with a `header` banner. This example also adds a `synopsis` list. [Code](https://github.com/75lb/command-line-usage/blob/master/example/header.js).\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/header.png)\n\n### Footer\nThe footer is displayed at the end of the template. [Code](https://github.com/75lb/command-line-usage/blob/master/example/footer.js).\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/footer.png)\n\n### Examples (column layout)\nA list of `examples` is added. In this case the example list is defined as an array of objects (each with consistently named properties) so will be formatted by [column-layout](https://github.com/75lb/column-layout).   [Code](https://github.com/75lb/command-line-usage/blob/master/example/examples.js).\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/example-columns.png)\n\n### Description (column layout)\nDemonstrates usage of custom column layout in the description. In this case the second column (containing the hammer and sickle) has `nowrap` enabled, as the input is already formatted as desired. [Code](https://github.com/75lb/command-line-usage/blob/master/example/description-columns.js).\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/description-columns.png)\n\n### Custom\nDemonstrates a custom template. The `getUsage.optionList()` method exists for users that want the option list and nothing else. [Code](https://github.com/75lb/command-line-usage/blob/master/example/custom.js).\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/custom.png)\n\n# API Reference\n\n* [command-line-usage](#module_command-line-usage)\n    * [getUsage(definitions, options)](#exp_module_command-line-usage--getUsage) ⇒ <code>string</code> ⏏\n        * [.optionList(definitions, [group])](#module_command-line-usage--getUsage.optionList) ⇒ <code>Array.&lt;string&gt;</code>\n\n<a name=\"exp_module_command-line-usage--getUsage\"></a>\n\n### getUsage(definitions, options) ⇒ <code>string</code> ⏏\n**Kind**: Exported function  \n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>definitions</td><td><code>Array.&lt;optionDefinition&gt;</code></td><td><p>an array of <a href=\"https://github.com/75lb/command-line-args#exp_module_definition--OptionDefinition\">option definition</a> objects. In addition to the regular definition properties, command-line-usage will look for:</p>\n<ul>\n<li><code>description</code> - a string describing the option.</li>\n<li><code>typeLabel</code> - a string to replace the default type string (e.g. <code>&lt;string&gt;</code>). It&#39;s often more useful to set a more descriptive type label, like <code>&lt;ms&gt;</code>, <code>&lt;files&gt;</code>, <code>&lt;command&gt;</code> etc.</li>\n</ul>\n</td>\n    </tr><tr>\n    <td>options</td><td><code><a href=\"#module_usage-options\">usage-options</a></code></td><td><p>see <a href=\"#exp_module_usage-options--UsageOptions\">UsageOptions</a>.</p>\n</td>\n    </tr>  </tbody>\n</table>\n\n<a name=\"module_command-line-usage--getUsage.optionList\"></a>\n\n#### getUsage.optionList(definitions, [group]) ⇒ <code>Array.&lt;string&gt;</code>\nA helper for getting a column-format list of options and descriptions. Useful for inserting into a custom usage template.\n\n**Kind**: static method of <code>[getUsage](#exp_module_command-line-usage--getUsage)</code>  \n<table>\n  <thead>\n    <tr>\n      <th>Param</th><th>Type</th><th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n<tr>\n    <td>definitions</td><td><code>Array.&lt;optionDefinition&gt;</code></td><td><p>the definitions to Display</p>\n</td>\n    </tr><tr>\n    <td>[group]</td><td><code>string</code></td><td><p>if specified, will output the options in this group. The special group <code>&#39;_none&#39;</code> will return options without a group specified.</p>\n</td>\n    </tr>  </tbody>\n</table>\n\n\n<a name=\"exp_module_usage-options--UsageOptions\"></a>\n\n## UsageOptions ⏏\nThe class describes all valid options for the `getUsage` function. Inline formatting can be used within any text string supplied using valid [ansi-escape-sequences formatting syntax](https://github.com/75lb/ansi-escape-sequences#module_ansi-escape-sequences.format).\n\n**Kind**: Exported class  \n* [UsageOptions](#exp_module_usage-options--UsageOptions) ⏏\n    * _instance_\n        * [.header](#module_usage-options--UsageOptions+header) : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\n        * [.title](#module_usage-options--UsageOptions+title) : <code>string</code>\n        * [.description](#module_usage-options--UsageOptions+description) : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\n        * [.synopsis](#module_usage-options--UsageOptions+synopsis) : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\n        * [.groups](#module_usage-options--UsageOptions+groups) : <code>object</code>\n        * [.examples](#module_usage-options--UsageOptions+examples) : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\n        * [.footer](#module_usage-options--UsageOptions+footer) : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\n        * [.hide](#module_usage-options--UsageOptions+hide) : <code>string</code> &#124; <code>Array.&lt;string&gt;</code>\n    * _inner_\n        * [~textBlock](#module_usage-options--UsageOptions..textBlock) : <code>string</code> &#124; <code>Array.&lt;string&gt;</code> &#124; <code>Array.&lt;object&gt;</code> &#124; <code>Object</code>\n\n<a name=\"module_usage-options--UsageOptions+header\"></a>\n\n### options.header : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\nUse this field to display a banner or header above the main body.\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n<a name=\"module_usage-options--UsageOptions+title\"></a>\n\n### options.title : <code>string</code>\nThe title line at the top of the usage, typically the name of the app. By default it is underlined but this formatting can be overridden by passing a [module:usage-options~textObject](module:usage-options~textObject).\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n**Example**  \n```js\n{ title: \"my-app\" }\n```\n<a name=\"module_usage-options--UsageOptions+description\"></a>\n\n### options.description : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\nA description to go underneath the title. For example, some words about what the app is for.\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n<a name=\"module_usage-options--UsageOptions+synopsis\"></a>\n\n### options.synopsis : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\nAn array of strings highlighting the main usage forms of the app.\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n<a name=\"module_usage-options--UsageOptions+groups\"></a>\n\n### options.groups : <code>object</code>\nSpecify which groups to display in the output by supplying an object of key/value pairs, where the key is the name of the group to include and the value is a string or textObject. If the value is a string it is used as the group title. Alternatively supply an object containing a `title` and `description` string.\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n**Example**  \n```js\n{\n    main: {\n        title: \"Main options\",\n        description: \"This group contains the most important options.\"\n    },\n    misc: \"Miscellaneous\"\n}\n```\n<a name=\"module_usage-options--UsageOptions+examples\"></a>\n\n### options.examples : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\nExamples\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n<a name=\"module_usage-options--UsageOptions+footer\"></a>\n\n### options.footer : <code>[textBlock](#module_usage-options--UsageOptions..textBlock)</code>\nDisplayed at the foot of the usage output.\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n**Example**  \n```js\n{\n    footer: \"Project home: [underline]{https://github.com/me/my-app}\"\n}\n```\n<a name=\"module_usage-options--UsageOptions+hide\"></a>\n\n### options.hide : <code>string</code> &#124; <code>Array.&lt;string&gt;</code>\nIf you want to hide certain options from the output, specify their names here. This is sometimes used to hide the `defaultOption`.\n\n**Kind**: instance property of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n**Example**  \n```js\n{\n    hide: \"files\"\n}\n```\n<a name=\"module_usage-options--UsageOptions..textBlock\"></a>\n\n### options~textBlock : <code>string</code> &#124; <code>Array.&lt;string&gt;</code> &#124; <code>Array.&lt;object&gt;</code> &#124; <code>Object</code>\nA text block can be a string:\n\n```js\n{\n  description: 'This is a single-line description.'\n}\n```\n.. or multiple strings:\n```js\n{\n  description: [\n    'This is a multi-line description.',\n    'A new string in the array represents a new line.'\n  ]\n}\n```\n.. or an array of objects. In which case, it will be formatted by [column-layout](https://github.com/75lb/column-layout):\n```js\n{\n  description: {\n    column1: 'This will go in column 1.',\n    column2: 'Second column text.'\n  }\n}\n```\nIf you want set specific column-layout options, pass an object with two properties: `options` and `data`.\n```js\n{\n  description: {\n    options: {\n      columns: [\n        { name: 'two', width: 40, nowrap: true }\n      ]\n    },\n    data: {\n      column1: 'This will go in column 1.',\n      column2: 'Second column text.'\n    }\n  }\n}\n```\n\n**Kind**: inner typedef of <code>[UsageOptions](#exp_module_usage-options--UsageOptions)</code>  \n\n\n* * *\n\n&copy; 2015-16 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/command-line-usage/issues"
  },
  "_id": "command-line-usage@2.0.5",
  "dist": {
    "shasum": "5016deea8dc99443a13266918c0c3879a91f2624"
  },
  "_from": "command-line-usage@^2",
  "_resolved": "https://registry.npmjs.org/command-line-usage/-/command-line-usage-2.0.5.tgz"
}
