{
  "name": "wordwrapjs",
  "author": {
    "name": "Lloyd Brookes",
    "email": "75pound@gmail.com"
  },
  "version": "1.2.1",
  "description": "Word-wrapping for javascript.",
  "repository": {
    "type": "git",
    "url": "https://github.com/75lb/wordwrapjs.git"
  },
  "license": "MIT",
  "main": "./lib/wordwrapjs.js",
  "keywords": [
    "word",
    "line",
    "wrap",
    "text",
    "columns"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "test-runner test/*.js",
    "docs": "jsdoc2md -t jsdoc2md/README.hbs lib/*.js > README.md; echo"
  },
  "devDependencies": {
    "core-assert": "^0.2.0",
    "jsdoc-to-markdown": "^2.0.0-alpha",
    "test-runner": "~0.1.9"
  },
  "dependencies": {
    "array-back": "^1.0.3",
    "typical": "^2.5.0"
  },
  "readme": "[![view on npm](http://img.shields.io/npm/v/wordwrapjs.svg)](https://www.npmjs.org/package/wordwrapjs)\n[![npm module downloads](http://img.shields.io/npm/dt/wordwrapjs.svg)](https://www.npmjs.org/package/wordwrapjs)\n[![Build Status](https://travis-ci.org/75lb/wordwrapjs.svg?branch=master)](https://travis-ci.org/75lb/wordwrapjs)\n[![Dependency Status](https://david-dm.org/75lb/wordwrapjs.svg)](https://david-dm.org/75lb/wordwrapjs)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n<a name=\"module_wordwrapjs\"></a>\n\n## wordwrapjs\nWord wrapping, with a few features.\n\n- multilingual - wraps any language using whitespace word separation.\n- force-break option\n- ignore pattern option (e.g. ansi escape sequences)\n- wraps hypenated words\n\n**Example**  \nWrap some sick bars in a 20 character column.\n\n```js\n> wrap = require(\"wordwrapjs\")\n\n> bars = \"I'm rapping. I'm rapping. I'm rap rap rapping. I'm rap rap rap rap rappity rapping.\"\n> result = wrap(bars, { width: 20 })\n```\n\n`result` now looks like this:\n```\nI'm rapping. I'm\nrapping. I'm rap rap\nrapping. I'm rap rap\nrap rap rappity\nrapping.\n```\n\nBy default, long words will not break. Unless you insist.\n```js\n> url = \"https://github.com/75lb/wordwrapjs\"\n\n> wrap.lines(url, { width: 18 })\n[ 'https://github.com/75lb/wordwrapjs' ]\n\n> wrap.lines(url, { width: 18, break: true })\n[ 'https://github.com', '/75lb/wordwrapjs' ]\n```\n\n* [wordwrapjs](#module_wordwrapjs)\n    * [wrap(text, [options])](#exp_module_wordwrapjs--wrap) ⇒ <code>string</code> ⏏\n        * [.lines(text, [options])](#module_wordwrapjs--wrap.lines) ⇒ <code>Array</code>\n        * [.isWrappable(text)](#module_wordwrapjs--wrap.isWrappable) ⇒ <code>boolean</code>\n        * [.getWords(text)](#module_wordwrapjs--wrap.getWords) ⇒ <code>Array.&lt;string&gt;</code>\n\n<a name=\"exp_module_wordwrapjs--wrap\"></a>\n\n### wrap(text, [options]) ⇒ <code>string</code> ⏏\n**Kind**: Exported function  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| text | <code>string</code> |  | the input text to wrap |\n| [options] | <code>object</code> |  | optional config |\n| [options.width] | <code>number</code> | <code>30</code> | the max column width in characters |\n| [options.ignore] | <code>RegExp</code> &#124; <code>Array.&lt;RegExp&gt;</code> |  | one or more patterns to be ignored when sizing the newly wrapped lines. For example `ignore: /\\u001b.*?m/g` will ignore unprintable ansi escape sequences. |\n| [options.break] | <code>boolean</code> |  | if true, words exceeding the specified `width` will be forcefully broken |\n| [options.eol] | <code>string</code> | <code>&quot;os.EOL&quot;</code> | the desired new line character to use, defaults to [os.EOL](https://nodejs.org/api/os.html#os_os_eol). |\n\n<a name=\"module_wordwrapjs--wrap.lines\"></a>\n\n#### wrap.lines(text, [options]) ⇒ <code>Array</code>\nreturns the wrapped output as an array of lines, rather than a single string\n\n**Kind**: static method of <code>[wrap](#exp_module_wordwrapjs--wrap)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| text | <code>string</code> | the input text to wrap |\n| [options] | <code>object</code> | same options as [wrap](#module_wordwrapjs) |\n\n**Example**  \n```js\n> bars = \"I'm rapping. I'm rapping. I'm rap rap rapping. I'm rap rap rap rap rappity rapping.\"\n> wrap.lines(bars)\n[ \"I'm rapping. I'm rapping. I'm\",\n  \"rap rap rapping. I'm rap rap\",\n  \"rap rap rappity rapping.\" ]\n```\n<a name=\"module_wordwrapjs--wrap.isWrappable\"></a>\n\n#### wrap.isWrappable(text) ⇒ <code>boolean</code>\nReturns true if the input text is wrappable\n\n**Kind**: static method of <code>[wrap](#exp_module_wordwrapjs--wrap)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| text | <code>string</code> | input text |\n\n<a name=\"module_wordwrapjs--wrap.getWords\"></a>\n\n#### wrap.getWords(text) ⇒ <code>Array.&lt;string&gt;</code>\nSplits the input text returning an array of words\n\n**Kind**: static method of <code>[wrap](#exp_module_wordwrapjs--wrap)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| text | <code>string</code> | input text |\n\n\n* * *\n\n&copy; 2015 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/jsdoc2md/jsdoc-to-markdown).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/75lb/wordwrapjs/issues"
  },
  "_id": "wordwrapjs@1.2.1",
  "dist": {
    "shasum": "24350e9380582c73246269dd9e6615abfb08ddb7"
  },
  "_from": "wordwrapjs@^1.2.0",
  "_resolved": "https://registry.npmjs.org/wordwrapjs/-/wordwrapjs-1.2.1.tgz"
}
