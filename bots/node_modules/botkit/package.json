{
  "name": "botkit",
  "version": "0.2.2",
  "description": "Building blocks for Building Bots",
  "main": "lib/Botkit.js",
  "dependencies": {
    "async": "^2.0.0-rc.5",
    "back": "^1.0.1",
    "body-parser": "^1.14.2",
    "command-line-args": "^2.1.6",
    "express": "^4.13.3",
    "https-proxy-agent": "^1.0.0",
    "jfs": "^0.2.6",
    "localtunnel": "^1.8.1",
    "mustache": "^2.2.1",
    "request": "^2.67.0",
    "twilio": "^2.9.1",
    "ware": "^1.3.0",
    "ws": "^1.0.1"
  },
  "devDependencies": {
    "jscs": "^2.7.0",
    "mocha": "^2.4.5",
    "should": "^8.0.2",
    "winston": "^2.1.1"
  },
  "scripts": {
    "pretest": "jscs ./lib/",
    "test": "mocha tests/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/howdyai/botkit.git"
  },
  "bugs": {
    "url": "https://github.com/howdyai/botkit/issues"
  },
  "homepage": "http://howdy.ai/botkit",
  "keywords": [
    "bots",
    "chatbots",
    "slack"
  ],
  "author": {
    "name": "ben@xoxco.com"
  },
  "license": "MIT",
  "readme": "# Botkit and Facebook\n\nBotkit is designed to ease the process of designing and running useful, creative bots that live inside [Slack](http://slack.com), [Facebook Messenger](http://facebook.com), [Twilio IP Messaging](https://www.twilio.com/docs/api/ip-messaging), and other messaging platforms.\n\n\nBotkit features a comprehensive set of tools\nto deal with [Facebooks's Messenger platform](https://developers.facebook.com/docs/messenger-platform/implementation), and allows\ndevelopers to build interactive bots and applications that send and receive messages just like real humans. Facebook bots can be connected to Facebook Pages, and can be triggered using a variety of [useful web plugins](https://developers.facebook.com/docs/messenger-platform/plugin-reference).\n\nThis document covers the Facebook-specific implementation details only. [Start here](readme.md) if you want to learn about to develop with Botkit.\n\nTable of Contents\n\n* [Getting Started](#getting-started)\n* [Facebook-specific Events](#facebook-specific-events)\n* [Working with Facebook Webhooks](#working-with-facebook-messenger)\n* [Using Structured Messages and Postbacks](#using-structured-messages-and-postbacks)\n\n## Getting Started\n\n1) Install Botkit [more info here](readme.md#installation)\n\n2) Create a [Facebook App for Web](https://developers.facebook.com/quickstarts/?platform=web) and note down or [create a new Facebook Page](https://www.facebook.com/pages/create/).  Your Facebook page will be used for the app's identity.\n\n3) [Get a page access token for your app](https://developers.facebook.com/docs/messenger-platform/implementation#page_access_token)\n\nCopy this token, you'll need it!\n\n4) Define your own \"verify token\" - this a string that you control that Facebook will use to verify your web hook endpoint.\n\n5) Run the example bot app, using the two tokens you just created. If you are _not_ running your bot at a public, SSL-enabled internet address, use the --lt option and note the URL it gives you.\n\n```\npage_token=<MY PAGE TOKEN> verify_token=<MY_VERIFY_TOKEN> node facebook_bot.js [--lt [--ltsubdomain CUSTOM_SUBDOMAIN]]\n```\n\n6) [Set up a webhook endpoint for your app](https://developers.facebook.com/docs/messenger-platform/implementation#setting_webhooks) that uses your public URL. Use the verify token you defined in step 4!\n\n7) Your bot should be online! Within Facebook, find your page, and click the \"Message\" button in the header.\n\nTry:\n  * who are you?\n  * call me Bob\n  * shutdown\n\n\n### Things to note\n\nSince Facebook delivers messages via web hook, your application must be available at a public internet address.  Additionally, Facebook requires this address to use SSL.  Luckily, you can use [LocalTunnel](https://localtunnel.me/) to make a process running locally or in your dev environment available in a Facebook-friendly way.\n\nWhen you are ready to go live, consider [LetsEncrypt.org](http://letsencrypt.org), a _free_ SSL Certificate Signing Authority which can be used to secure your website very quickly. It is fabulous and we love it.\n\n## Facebook-specific Events\n\nOnce connected to Facebook, bots receive a constant stream of events.\n\nNormal messages will be sent to your bot using the `message_received` event.  In addition, several other events may fire, depending on your implementation and the webhooks you subscribed to within your app's Facebook configuration.\n\n| Event | Description\n|--- |---\n| message_received | a message was received by the bot\n| facebook_postback | user clicked a button in an attachment and triggered a webhook postback\n| message_delivered | a confirmation from Facebook that a message has been received\n| facebook_optin | a user has clicked the [Send-to-Messenger plugin](https://developers.facebook.com/docs/messenger-platform/implementation#send_to_messenger_plugin)\n\nAll incoming events will contain the fields `user` and `channel`, both of which represent the Facebook user's ID, and a `timestamp` field.\n\n`message_received` events will also contain either a `text` field or an `attachment` field.\n\n`facebook_postback` events will contain a `payload` field.\n\nMore information about the data found in these fields can be found [here](https://developers.facebook.com/docs/messenger-platform/webhook-reference).\n\n## Working with Facebook Messenger\n\nBotkit receives messages from Facebook using webhooks, and sends messages using Facebook's APIs. This means that your bot application must present a web server that is publicly addressable. Everything you need to get started is already included in Botkit.\n\nTo connect your bot to Facebook, [follow the instructions here](https://developers.facebook.com/docs/messenger-platform/implementation). You will need to collect your `page token` as well as a `verify token` that you define yourself and configure inside Facebook's app settings. A step by step guide [can be found here](#getting-started). Since you must *already be running* your Botkit app to configure your Facebook app, there is a bit of back-and-forth. It's ok! You can do it.\n\nHere is the complete code for a basic Facebook bot:\n\n```javascript\nvar Botkit = require('botkit');\nvar controller = Botkit.facebookbot({\n        access_token: process.env.access_token,\n        verify_token: process.env.verify_token,\n})\n\nvar bot = controller.spawn({\n});\n\n// if you are already using Express, you can use your own server instance...\n// see \"Use BotKit with an Express web server\"\ncontroller.setupWebserver(process.env.port,function(err,webserver) {\n  controller.createWebhookEndpoints(controller.webserver, bot, function() {\n      console.log('This bot is online!!!');\n  });\n});\n\n// this is triggered when a user clicks the send-to-messenger plugin\ncontroller.on('facebook_optin', function(bot, message) {\n\n    bot.reply(message, 'Welcome to my app!');\n\n});\n\n// user said hello\ncontroller.hears(['hello'], 'message_received', function(bot, message) {\n\n    bot.reply(message, 'Hey there.');\n\n});\n\ncontroller.hears(['cookies'], 'message_received', function(bot, message) {\n\n    bot.startConversation(message, function(err, convo) {\n\n        convo.say('Did someone say cookies!?!!');\n        convo.ask('What is your favorite type of cookie?', function(response, convo) {\n            convo.say('Golly, I love ' + response.text + ' too!!!');\n            convo.next();\n        });\n    });\n});\n```\n\n\n#### controller.setupWebserver()\n| Argument | Description\n|---  |---\n| port | port for webserver\n| callback | callback function\n\nSetup an [Express webserver](http://expressjs.com/en/index.html) for\nuse with `createWebhookEndpoints()`\n\nIf you need more than a simple webserver to receive webhooks,\nyou should by all means create your own Express webserver!\n\nThe callback function receives the Express object as a parameter,\nwhich may be used to add further web server routes.\n\n#### controller.createWebhookEndpoints()\n\nThis function configures the route `https://_your_server_/facebook/receive`\nto receive webhooks from Facebook.\n\nThis url should be used when configuring Facebook.\n\n## Using Structured Messages and Postbacks\n\nYou can attach little bubbles\n\nAnd in those bubbles can be buttons\nand when a user clicks the button, it sends a postback with the value.\n\n```javascript\ncontroller.hears('test', 'message_received', function(bot, message) {\n\n    var attachment = {\n        'type':'template',\n        'payload':{\n            'template_type':'generic',\n            'elements':[\n                {\n                    'title':'Chocolate Cookie',\n                    'image_url':'http://cookies.com/cookie.png',\n                    'subtitle':'A delicious chocolate cookie',\n                    'buttons':[\n                        {\n                        'type':'postback',\n                        'title':'Eat Cookie',\n                        'payload':'chocolate'\n                        }\n                    ]\n                },\n            ]\n        }\n    };\n\n    bot.reply(message, {\n        attachment: attachment,\n    });\n\n});\n\ncontroller.on('facebook_postback', function(bot, message) {\n\n    if (message.payload == 'chocolate') {\n        bot.reply(message, 'You ate the chocolate cookie!')\n    }\n\n});\n```\n",
  "readmeFilename": "readme-facebook.md",
  "_id": "botkit@0.2.2",
  "dist": {
    "shasum": "bf129d29327a2195477fed44f3ce5e9c08d81f49"
  },
  "_from": "botkit@",
  "_resolved": "https://registry.npmjs.org/botkit/-/botkit-0.2.2.tgz"
}
